import * as pg from 'pg';
import * as dotenv from 'dotenv';

dotenv.config();

const pool = new pg.Pool({ connectionString: process.env.SUPABASE_DB_URL });

export interface AdvancedFilters {
  category?: string[];
  year_range?: { min?: number; max?: number };
}

export interface RetrievedAdvanced {
  id: string;
  text: string;
  source: string;
  year: number;
  category: string;
  score: number;
}

/**
 * Interfaz para la respuesta de categorizaci√≥n de la IA
 */
export interface AIAnalysisResponse {
  translation: string;
  category: string;
  conditions: string[];
  relevance_score: number;
  language: 'Espa√±ol' | 'English';
}

/**
 * Filtrado post-b√∫squeda inteligente usando similitud sem√°ntica
 * Eval√∫a si los documentos encontrados son realmente relevantes para la consulta
 * Ajusta din√°micamente el threshold basado en la distribuci√≥n de similitudes
 */
async function filterBySemanticRelevance(
  results: RetrievedAdvanced[],
  userQuery: string,
  threshold: number = 0.5,
): Promise<RetrievedAdvanced[]> {
  if (results.length === 0) return results;

  console.log(
    'üîç Iniciando filtrado post-b√∫squeda por relevancia sem√°ntica...',
  );
  console.log(`üîç Threshold inicial: ${threshold}`);

  try {
    // Generar embedding de la consulta del usuario
    const { EmbeddingService } = await import('./embedding-service');
    const embeddingService = new EmbeddingService();
    const queryEmbedding = await embeddingService.embed(userQuery);

    console.log('üîç Embedding de consulta generado, evaluando documentos...');

    // Evaluar similitud sem√°ntica de cada documento
    const scoredResults = await Promise.all(
      results.map(async (doc) => {
        try {
          // Crear texto del documento para embedding (category + text)
          const docText = `${doc.category} ${doc.text}`;
          const docEmbedding = await embeddingService.embed(docText);

          // Calcular similitud coseno
          const similarity = calculateCosineSimilarity(
            queryEmbedding,
            docEmbedding,
          );

          return {
            ...doc,
            semanticScore: similarity,
          };
        } catch (error) {
          console.error('üîç Error evaluando documento:', error);
          // Si hay error, mantener el documento pero marcarlo como no relevante
          return {
            ...doc,
            semanticScore: 0,
          };
        }
      }),
    );

    // Ordenar por score sem√°ntico para analizar la distribuci√≥n
    const sortedResults = scoredResults.sort(
      (a, b) => (b.semanticScore || 0) - (a.semanticScore || 0),
    );

    // Mostrar todas las similitudes para debugging
    sortedResults.forEach((doc, index) => {
      console.log(
        `üîç ${index + 1}. ${doc.category} - Similitud: ${(doc.semanticScore || 0).toFixed(3)}`,
      );
    });

    // Calcular threshold din√°mico basado en la distribuci√≥n de similitudes
    const similarities = sortedResults.map((doc) => doc.semanticScore || 0);
    const maxSimilarity = Math.max(...similarities);
    const minSimilarity = Math.min(...similarities);
    const avgSimilarity =
      similarities.reduce((a, b) => a + b, 0) / similarities.length;

    // Threshold adaptativo: usar el percentil 75% o la media, lo que sea m√°s bajo
    const adaptiveThreshold = Math.min(
      avgSimilarity,
      maxSimilarity * 0.3, // 30% del m√°ximo
      0.15, // Threshold m√≠nimo absoluto
    );

    console.log(`üîç Estad√≠sticas de similitud:`);
    console.log(`üîç   M√°xima: ${maxSimilarity.toFixed(3)}`);
    console.log(`üîç   M√≠nima: ${minSimilarity.toFixed(3)}`);
    console.log(`üîç   Promedio: ${avgSimilarity.toFixed(3)}`);
    console.log(`üîç   Threshold adaptativo: ${adaptiveThreshold.toFixed(3)}`);

    // Usar el threshold m√°s bajo entre el original y el adaptativo
    const finalThreshold = Math.min(threshold, adaptiveThreshold);
    console.log(`üîç   Threshold final: ${finalThreshold.toFixed(3)}`);

    // Filtrar por relevancia usando el threshold adaptativo
    const relevantResults = sortedResults.filter(
      (doc) => (doc.semanticScore || 0) > finalThreshold,
    );

    console.log(`üîç Filtrado completado:`);
    console.log(`üîç Documentos originales: ${results.length}`);
    console.log(`üîç Documentos relevantes: ${relevantResults.length}`);
    console.log(
      `üîç Documentos filtrados: ${results.length - relevantResults.length}`,
    );

    // Si no hay resultados relevantes, retornar al menos el top 2 m√°s similares
    if (relevantResults.length === 0 && sortedResults.length > 0) {
      console.log(
        'üîç No hay resultados relevantes, retornando top 2 m√°s similares...',
      );
      return sortedResults.slice(0, 2);
    }

    return relevantResults;
  } catch (error) {
    console.error(
      'üîç Error en filtrado sem√°ntico, retornando resultados originales:',
      error,
    );
    return results; // Fallback: retornar todos los resultados si falla el filtrado
  }
}

/**
 * Calcular similitud coseno entre dos vectores
 */
function calculateCosineSimilarity(vec1: number[], vec2: number[]): number {
  if (vec1.length !== vec2.length) {
    console.warn('üîç Vectores de diferentes longitudes, retornando 0');
    return 0;
  }

  let dotProduct = 0;
  let norm1 = 0;
  let norm2 = 0;

  for (let i = 0; i < vec1.length; i++) {
    dotProduct += vec1[i] * vec2[i];
    norm1 += vec1[i] * vec1[i];
    norm2 += vec2[i] * vec2[i];
  }

  const denominator = Math.sqrt(norm1) * Math.sqrt(norm2);

  if (denominator === 0) return 0;

  return dotProduct / denominator;
}

/**
 * B√∫squeda avanzada con filtros por metadatos
 */
export async function retrieveContextAdvanced(
  userQuery: string,
  language: 'Espa√±ol' | 'English',
  filters?: AdvancedFilters,
  topK: number = 10,
): Promise<RetrievedAdvanced[]> {
  try {
    // Generar embedding de la consulta para b√∫squeda vectorial
    const { EmbeddingService } = await import('./embedding-service');
    const embeddingService = new EmbeddingService();
    const embedding = await embeddingService.embed(userQuery);
    const vectorString = `[${embedding.join(',')}]`;

    // Construir la consulta SQL din√°micamente
    let sql = `
      SELECT
        id, text, source, year,
        COALESCE(domain, 'general') as category,
        embedding <#> $2::vector as score
      FROM docs
      WHERE language = $1
    `;

    const params: any[] = [language, vectorString];
    let paramIndex = 3;

    // Agregar filtros de categor√≠a
    if (filters?.category && filters.category.length > 0) {
      sql += ` AND domain = ANY($${paramIndex})`;
      params.push(filters.category);
      paramIndex++;
    }

    // Agregar filtros de a√±o
    if (filters?.year_range) {
      if (filters.year_range.min) {
        sql += ` AND year >= $${paramIndex}`;
        params.push(filters.year_range.min);
        paramIndex++;
      }
      if (filters.year_range.max) {
        sql += ` AND year <= $${paramIndex}`;
        params.push(filters.year_range.max);
        paramIndex++;
      }
    }

    // Ordenar por similitud vectorial (score m√°s bajo = m√°s similar)
    sql += `
      ORDER BY
        score ASC
      LIMIT $${paramIndex}
    `;

    params.push(topK);

    console.log('üîç Advanced RAG query:', sql);
    console.log('üîç Parameters:', params);

    const { rows } = await pool.query(sql, params);

    console.log(
      `‚úÖ Advanced RAG found ${rows.length} results for "${userQuery}" in ${language}`,
    );

    return rows as RetrievedAdvanced[];
  } catch (error) {
    console.error('Error in advanced RAG:', error);
    // Fallback: usar la funci√≥n original de retrieve.ts
    try {
      console.log('üîÑ Fallback: usando retrieveContext original...');
      const { retrieveContext } = await import('./retrieve');
      const fallbackResults = await retrieveContext(userQuery, language, topK);

      // Convertir formato de Retrieved a RetrievedAdvanced
      return fallbackResults.map((doc) => ({
        id: doc.id,
        text: doc.text,
        source: doc.source,
        year: doc.year,
        category: doc.domain || 'general',
        score: 0.0, // Score por defecto para resultados del fallback
      }));
    } catch (fallbackError) {
      console.error('Error en fallback tambi√©n:', fallbackError);
      return [];
    }
  }
}

/**
 * B√∫squeda inteligente que usa categorizaci√≥n autom√°tica de la IA
 * La IA categoriza el mensaje y el sistema usa esa informaci√≥n para RAG inteligente
 */
export async function retrieveContextSmart(
  userQuery: string, // Query original del usuario
  aiAnalysis: AIAnalysisResponse, // An√°lisis de la IA con categorizaci√≥n
  topK: number = 10,
): Promise<RetrievedAdvanced[]> {
  console.log('üöÄ retrieveContextSmart iniciado');
  console.log('üöÄ Query original:', userQuery);
  console.log('üöÄ An√°lisis de la IA:', aiAnalysis);
  console.log('üöÄ TopK:', topK);

  // Usar el idioma detectado por la IA
  const detectedLanguage = aiAnalysis.language;
  console.log('üåç Idioma detectado por la IA:', detectedLanguage);

  // B√öSQUEDA INTELIGENTE BASADA EN CATEGORIZACI√ìN DE LA IA
  console.log('üîç Iniciando b√∫squeda basada en categorizaci√≥n de la IA...');

  let results: RetrievedAdvanced[] = [];

  // 1. B√öSQUEDA POR CATEGOR√çA DETECTADA POR LA IA
  if (aiAnalysis.category) {
    console.log(`üîç Buscando en categor√≠a detectada: ${aiAnalysis.category}`);
    const categoryResults = await retrieveContextAdvanced(
      aiAnalysis.translation, // Usar la traducci√≥n de la IA
      detectedLanguage,
      { category: [aiAnalysis.category] },
      Math.ceil(topK * 0.7), // 70% de resultados de la categor√≠a principal
    );
    results = [...results, ...categoryResults];
    console.log(
      `‚úÖ Encontrados ${categoryResults.length} resultados en categor√≠a ${aiAnalysis.category}`,
    );
  }

  // 2. B√öSQUEDA POR CONDICIONES ESPEC√çFICAS DETECTADAS POR LA IA
  if (aiAnalysis.conditions.length > 0 && results.length < topK) {
    console.log(
      'üîç Buscando por condiciones espec√≠ficas detectadas por la IA...',
    );
    const remainingCount = topK - results.length;

    // B√∫squeda vectorial pura y luego filtrar por condiciones
    const conditionResults = await retrieveContextAdvanced(
      aiAnalysis.translation,
      detectedLanguage,
      undefined, // Sin filtros de categor√≠a
      remainingCount * 2, // Buscar m√°s para poder filtrar
    );

    // Filtrar por condiciones detectadas por la IA
    const filteredConditionResults = conditionResults.filter((doc) =>
      aiAnalysis.conditions.some(
        (condition) =>
          doc.text.toLowerCase().includes(condition.toLowerCase()) ||
          doc.category.toLowerCase().includes(condition.toLowerCase()),
      ),
    );

    // Tomar solo los necesarios
    const neededResults = filteredConditionResults.slice(0, remainingCount);
    results = [...results, ...neededResults];
    console.log(
      `‚úÖ Encontrados ${neededResults.length} resultados por condiciones espec√≠ficas`,
    );
  }

  // 3. B√öSQUEDA VECTORIAL COMO FALLBACK
  if (results.length < topK) {
    console.log('üîç B√∫squeda vectorial como fallback...');
    const remainingCount = topK - results.length;
    const vectorResults = await retrieveContextAdvanced(
      aiAnalysis.translation,
      detectedLanguage,
      undefined, // Sin filtros
      remainingCount,
    );
    results = [...results, ...vectorResults];
    console.log(
      `‚úÖ Encontrados ${vectorResults.length} resultados por b√∫squeda vectorial`,
    );
  }

  // 4. B√öSQUEDA EN OTRO IDIOMA SI ES NECESARIO
  if (results.length < topK) {
    const otherLanguage =
      detectedLanguage === 'Espa√±ol' ? 'English' : 'Espa√±ol';
    const remainingCount = topK - results.length;

    console.log(
      `üîÑ Buscando ${remainingCount} resultados adicionales en ${otherLanguage}`,
    );

    const otherResults = await retrieveContextAdvanced(
      aiAnalysis.translation,
      otherLanguage,
      undefined,
      remainingCount,
    );

    console.log(
      `‚úÖ Encontrados ${otherResults.length} resultados adicionales en ${otherLanguage}`,
    );
    results = [...results, ...otherResults];
  }

  // Eliminar duplicados por ID
  results = results.filter(
    (doc, index, self) => index === self.findIndex((d) => d.id === doc.id),
  );

  console.log(`üéØ Total de resultados √∫nicos: ${results.length}`);

  // Mostrar los documentos encontrados antes del filtrado
  console.log('üìö DOCUMENTOS ENCONTRADOS ANTES DEL FILTRADO:');
  results.forEach((doc, index) => {
    console.log(`  ${index + 1}. ${doc.category} - Score: ${doc.score}`);
    console.log(`     Texto: ${doc.text.substring(0, 80)}...`);
    console.log(`     Fuente: ${doc.source || 'N/A'}`);
  });

  // Aplicar filtrado post-b√∫squeda por relevancia sem√°ntica
  console.log(
    'üöÄ Aplicando filtrado post-b√∫squeda por relevancia sem√°ntica...',
  );
  const filteredResults = await filterBySemanticRelevance(
    results,
    aiAnalysis.translation, // Usar la traducci√≥n de la IA para el filtrado
    0.25,
  );

  console.log(
    `üéØ Resultados finales despu√©s del filtrado: ${filteredResults.length}`,
  );
  return filteredResults;
}
